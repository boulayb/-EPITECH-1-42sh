analyze_char.c:  while (line->buffer[offset] && nb_bytes > 0)
analyze_char.c:      go_left(offset, line->buffer, line->nb_char);
analyze_char.c:      --line->nb_char;
analyze_char.c:  nb_bytes = analyze_char(line->buffer[offset]);
analyze_char.c:      go_left(offset, line->buffer, line->nb_char);
analyze_char.c:      --line->nb_char;
analyze_char.c:      while (offset != 0 && analyze_char(line->buffer[offset]) == 1)
analyze_char.c:	  go_left(offset, line->buffer, line->nb_char);
analyze_char.c:	  --line->nb_char;
analyze_char.c:      go_left(offset, line->buffer, line->nb_char);
analyze_char.c:      --line->nb_char;
backward.c:  if ((nb_bytes = analyze_char(line->buffer[offset - 1])) == 0)
backward.c:    --line->cursor_offset;
backward.c:      while (offset != 0 && analyze_char(line->buffer[offset - 1]) == 1)
backward.c:	  --line->cursor_offset;
backward.c:	--line->cursor_offset;
backward.c:  if (line->cursor_offset > 0)
backward.c:      if (((line->cursor_begin + line->cursor_position - 1) %
backward.c:      decale_bytes_left(line, line->cursor_offset);
backward.c:      --line->cursor_position;
beg_line.c:  line->cursor_offset = 0;
beg_line.c:  line->cursor_position = 0;
check_history_built.c:  if (strncmp("!!", line->buffer + i, 2) == 0)
check_history_built.c:    return (replace_history(line->buffer, i, len,
check_history_built.c:	  if (line->buffer[i + 1])
check_history_built.c:		  strncmp(line->buffer + i + 1,
check_history_built.c:		  replace_history(line->buffer, i, len,
check_history_built.c:  while (line->buffer[i])
check_history_built.c:      if (line->buffer[i] == '!' && line->buffer[i + 1])
check_history_built.c:	  cmd_len = get_cmd_len(line->buffer, i);
check_history_built.c:	      is_in_double_quotes(line->buffer, i) != 0)
check_history_built.c:      my_fputstr(1, line->buffer);
clear_screen.c:  refresh_screen(line, line->cursor_position, line->buffer, params->caps);
complete.c:  strcpy(complete.buffer, line->buffer);
complete.c:  complete.offset_begin = get_word_begin(line->cursor_offset, complete.buffer);
complete.c:  else if (complete.offset_begin == line->cursor_offset)
complete_matched_tab.c:      line->nb_char = line->nb_char + my_strlen(buff);
complete_matched_tab.c:      line->nb_char_pos = count_char_pos(line->buffer, line->nb_char - 1);
complete_matched_tab.c:      go_right(line->cursor_offset, line->buffer, line->nb_char,
complete_matched_tab.c:      memcpy(line->buffer + line->cursor_offset, buff, my_strlen(buff));
complete_matched_tab.c:      line->cursor_offset = line->cursor_offset + my_strlen(buff);
complete_matched_tab.c:      line->cursor_position = count_char_pos(line->buffer,
complete_matched_tab.c:					     line->cursor_offset);
complete_matched_tab.c:  get_cursor_pos(&line->cursor_begin, &line->line_begin);
complete_matched_tab.c:  refresh_screen(line, line->cursor_position, line->buffer, params->caps);
complete_matched_tab.c:	      refresh_screen(line, line->cursor_position, line->buffer,
del_all.c:  if (line->nb_char != 0)
del_all.c:      memset(line->buffer, 0, BUFF);
del_all.c:      line->cursor_offset = 0;
del_all.c:      line->cursor_position = 0;
del_all.c:      line->nb_char = 0;
del_all.c:      line->nb_char_pos = 0;
del_back.c:  if ((nb_bytes = analyze_char(line->buffer[offset - 1])) == 1)
del_back.c:      while (line->cursor_offset != 0 &&
del_back.c:	     (nb_bytes = analyze_char(line->buffer[line->cursor_offset - 1]))
del_back.c:	  --line->cursor_offset;
del_back.c:	  go_left(line->cursor_offset, line->buffer, line->nb_char);
del_back.c:	  --line->nb_char;
del_back.c:      --line->cursor_offset;
del_back.c:      go_left(line->cursor_offset, line->buffer, line->nb_char);
del_back.c:      --line->nb_char;
del_back.c:  if (line->cursor_offset > 0)
del_back.c:	   analyze_char(line->buffer[line->cursor_offset - 1])) == 0)
del_back.c:	  --line->cursor_offset;
del_back.c:	  go_left(line->cursor_offset, line->buffer, line->nb_char);
del_back.c:	  --line->nb_char;
del_back.c:	delete_back_spec_char(line, line->cursor_offset);
del_back.c:      --line->nb_char_pos;
del_back.c:      --line->cursor_position;
del_back.c:      refresh_screen(line, line->cursor_position, line->buffer, params->caps);
del_char.c:  if ((nb_bytes = analyze_char(line->buffer[offset])) == 1)
del_char.c:      while ((nb_bytes = analyze_char(line->buffer[line->cursor_offset])) == 1)
del_char.c:	  go_left(line->cursor_offset, line->buffer, line->nb_char);
del_char.c:	  --line->nb_char;
del_char.c:	  --line->cursor_offset;
del_char.c:      go_left(line->cursor_offset, line->buffer, line->nb_char);
del_char.c:      --line->nb_char;
del_char.c:      --line->cursor_offset;
del_char.c:	  go_left(line->cursor_offset, line->buffer, line->nb_char);
del_char.c:	  --line->nb_char;
del_char.c:  if (line->cursor_offset < line->nb_char)
del_char.c:      if ((nb_bytes = analyze_char(line->buffer[line->cursor_offset])) == 0)
del_char.c:	  go_left(line->cursor_offset, line->buffer, line->nb_char);
del_char.c:	  line->nb_char = line->nb_char - 1;
del_char.c:	delete_spec_char(line, line->cursor_offset);
del_char.c:      --line->nb_char_pos;
del_char.c:      refresh_screen(line, line->cursor_position, line->buffer, params->caps);
del_line.c:  i = line->cursor_offset;
del_line.c:  while (i < line->nb_char)
del_line.c:      line->buffer[i] = 0;
del_line.c:  line->nb_char = line->cursor_offset;
del_line.c:  line->nb_char_pos = line->cursor_position;
del_line.c:  line->buffer[line->nb_char] = 0;
del_word.c:  if (my_strlen(line->buffer) != 0)
del_word.c:      offset = get_end_last_word(line->buffer, line->nb_char - 1);
del_word.c:      line->cursor_offset = offset;
del_word.c:      memset(line->buffer + line->cursor_offset, 0, BUFF -
del_word.c:	     line->cursor_offset);
del_word.c:      line->nb_char = line->cursor_offset;
del_word.c:      line->cursor_position = count_char_pos(line->buffer, offset);
del_word.c:      line->nb_char_pos = line->cursor_position;
del_word.c:      refresh_screen(line, line->cursor_position, line->buffer, params->caps);
down_histo.c:  if (line->history_offset != 0)
down_histo.c:      memset(line->buffer, 0, BUFF);
down_histo.c:					 (line->history_offset - 1)];
down_histo.c:	  memcpy(line->buffer, str, my_strlen(str));
down_histo.c:	  line->cursor_offset = my_strlen(line->buffer);
down_histo.c:	  line->nb_char = line->cursor_offset;
down_histo.c:	  line->cursor_position = count_char_pos(line->buffer, line->nb_char);
down_histo.c:	  line->nb_char_pos = line->cursor_position;
down_histo.c:      refresh_screen(line, line->cursor_position, line->buffer, params->caps);
down_histo.c:      --line->history_offset;
end_line.c:  if (line->cursor_offset < line->nb_char)
end_line.c:      if (line->line_nb)
end_line.c:	xtputs_param(params->caps->DOWN_str, 1, my_putint, line->line_nb);
end_line.c:      if ((line->cursor_begin + line->nb_char_pos - 1) % params->caps->column -
end_line.c:	  (line->cursor_begin - 1) > 0)
end_line.c:	       (line->cursor_begin + line->nb_char_pos - 1) %
end_line.c:	       params->caps->column - (line->cursor_begin - 1));
end_line.c:      else if ((line->cursor_begin + line->nb_char_pos - 1) %
end_line.c:	       params->caps->column - (line->cursor_begin - 1) < 0)
end_line.c:	       -((line->cursor_begin + line->nb_char_pos - 1) %
end_line.c:		 params->caps->column - (line->cursor_begin - 1)));
end_line.c:  line->cursor_offset = line->nb_char;
end_line.c:  line->cursor_position = line->nb_char_pos;
exchange.c:  if (line->cursor_offset != 0 && line->cursor_position < line->nb_char_pos)
exchange.c:      ret = exchange_chars(line->buffer, line->cursor_offset);
exchange.c:      ++line->cursor_position;
exchange.c:      line->cursor_offset = line->cursor_offset + ret;
exchange.c:  else if (line->cursor_offset != 0 && line->nb_char_pos > 1)
exchange.c:    exchange_chars(line->buffer, line->cursor_offset - 1);
exchange.c:  refresh_screen(line, line->cursor_position, line->buffer, params->caps);
foreward.c:  if ((nb_bytes = analyze_char(line->buffer[offset])) == 0)
foreward.c:    ++line->cursor_offset;
foreward.c:      while ((line->cursor_offset < line->nb_char)  && (nb_bytes > 0))
foreward.c:	  ++line->cursor_offset;
foreward.c:  if (line->cursor_offset < line->nb_char)
foreward.c:      if (((line->cursor_begin + line->cursor_position - 1) %
foreward.c:      decale_bytes_right(line, line->cursor_offset);
foreward.c:      ++line->cursor_position;
get_cmd.c:  if (my_strlen(line->buffer + len) > BUFF - 2)
get_cmd.c:      memset(line->buffer, 0, BUFF);
get_cmd.c:      line->cursor_offset = 0;
get_cmd.c:      line->nb_char = 0;
get_cmd.c:  if (line->character[0] == 27)
get_cmd.c:  if (check_overflow(cap, line, my_strlen(line->character)))
get_cmd.c:  line->nb_char = line->nb_char + my_strlen(line->character);
get_cmd.c:  memcpy(save, line->buffer + line->cursor_offset,
get_cmd.c:	 my_strlen(&line->buffer[line->cursor_offset]));
get_cmd.c:  memcpy(line->buffer + line->cursor_offset, line->character,
get_cmd.c:	 my_strlen(line->character));
get_cmd.c:  line->cursor_offset = line->cursor_offset + my_strlen(line->character);
get_cmd.c:  memcpy(line->buffer + line->cursor_offset, save, my_strlen(save));
get_cmd.c:  ++line->cursor_position;
get_cmd.c:  ++line->nb_char_pos;
get_cmd.c:  if (line->buffer[my_strlen(line->buffer) - 1] == '\n')
get_cmd.c:      line->buffer[my_strlen(line->buffer) - 1] = 0;
get_cmd.c:      --line->cursor_position;
get_cmd.c:  refresh_screen(line, line->cursor_position, line->buffer, cap);
get_cmd.c:      memset(line->character, 0, BUFF);
get_cmd.c:      if ((ret = read(0, line->character, BUFF)) == -1)
get_cmd.c:     if (my_strcmp(line->character, "\n") == 1 ||
get_cmd.c:	 check_ctrl(line->character) == CTRL_J)
get_cmd.c:     if (((line->nb_char == 0) && (check_ctrl(line->character) == CTRL_D)) || ret == 0)
get_cmd.c:     if (line->character[my_strlen(line->character) - 1] == '\n')
get_key.c:  str = line->character;
get_key.c:      check_ctrl(line->character) == CTRL_N)
get_key.c:	   check_ctrl(line->character) == CTRL_P)
get_key.c:	  check_ctrl(line->character) == CTRL_B)
get_key.c:	   check_ctrl(line->character) == CTRL_F)
get_key.c:	   check_ctrl(line->character) == CTRL_D)
get_key.c:  else if (my_strcmp(line->character, "\t") == 1)
get_key.c:  if ((line->character[0] == DELETE_KEY && line->character[1] == 0) ||
get_key.c:      (line->nb_char && check_ctrl(line->character) == CTRL_H))
get_key.c:  else if (check_ctrl(line->character) == CTRL_A)
get_key.c:  else if (check_ctrl(line->character) == CTRL_E)
get_key.c:  else if (check_ctrl(line->character) == CTRL_L)
get_key.c:  else if (check_ctrl(line->character) == CTRL_K)
get_key.c:  else if (check_ctrl(line->character) == CTRL_T)
get_key.c:  else if (check_ctrl(line->character) == CTRL_U)
get_key.c:  else if (check_ctrl(line->character) == CTRL_W)
new_history_file.c:  if ((i != 0 && (strcmp(line->buffer, history->history_tab[i - 1]) != 0)) ||
new_history_file.c:      if (line->buffer[0] != 0)
new_history_file.c:	  my_fputstr(fd, line->buffer);
refresh_screen.c:  save = line->line_nb;
refresh_screen.c:  line->line_nb = (cursor_off + line->cursor_begin - 1) / cap->column;
refresh_screen.c:  if ((line->line_begin + line->line_nb >= cap->line + 1) &&
refresh_screen.c:      (save != line->line_nb) && ((line->line_begin--) || 1))
refresh_screen.c:  if (line->line_nb)
refresh_screen.c:    xtputs_param(cap->DOWN_str, 1, my_putint, line->line_nb);
refresh_screen.c:  if ((cursor_off + line->cursor_begin - 1) % cap->column -
refresh_screen.c:      (line->cursor_begin - 1) > 0)
refresh_screen.c:		 (cursor_off + line->cursor_begin - 1) % cap->column -
refresh_screen.c:		 (line->cursor_begin - 1));
refresh_screen.c:  else if ((cursor_off + line->cursor_begin - 1) % cap->column -
refresh_screen.c:	   (line->cursor_begin - 1) < 0)
refresh_screen.c:		 -((line->cursor_begin + cursor_off - 1) %
refresh_screen.c:		   cap->column - (line->cursor_begin - 1)));
shell_get_line.c:  line->nb_char_pos = 0;
shell_get_line.c:  line->nb_char = 0;
shell_get_line.c:  line->cursor_offset = 0;
shell_get_line.c:  memset(line->buffer, 0, BUFF);
shell_get_line.c:  line->history_offset = 0;
shell_get_line.c:  line->cursor_position = 0;
shell_get_line.c:  line->line_nb = 0;
shell_get_line.c:  get_cursor_pos(&line->cursor_begin, &line->line_begin);
signal.c:	  g_line->cursor_position = 0;
signal.c:	  g_line->cursor_offset = 0;
signal.c:	  g_line->nb_char = 0;
signal.c:	  g_line->nb_char_pos = 0;
signal.c:	  memset(g_line->buffer, 0, BUFF);
up_histo.c:  if (history->history_tab[history->nb_max - (line->history_offset)] != NULL)
up_histo.c:    free(history->history_tab[history->nb_max - (line->history_offset)]);
up_histo.c:		       (line->history_offset)] = strdup(line->buffer);
up_histo.c:  if (line->history_offset < params->history->nb_max)
up_histo.c:      memset(line->buffer, 0, BUFF);
up_histo.c:					 (line->history_offset + 1)];
up_histo.c:	  memcpy(line->buffer, str, my_strlen(str));
up_histo.c:	  line->cursor_offset = my_strlen(line->buffer);
up_histo.c:	  line->nb_char = line->cursor_offset;
up_histo.c:	  line->cursor_position = count_char_pos(line->buffer, line->nb_char);
up_histo.c:	  line->nb_char_pos = line->cursor_position;
up_histo.c:      refresh_screen(line, line->cursor_position, line->buffer, params->caps);
up_histo.c:      ++line->history_offset;
